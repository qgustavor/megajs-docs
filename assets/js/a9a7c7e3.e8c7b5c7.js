"use strict";(self.webpackChunkmegajs_docs=self.webpackChunkmegajs_docs||[]).push([[7223],{90:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>f});var i=t(4848),o=t(8453),r=t(1432);const a="import { File, verify } from 'npm:megajs'\nimport { join } from 'https://deno.land/std@0.224.0/path/mod.ts'\nimport { parseArgs } from 'jsr:@std/cli/parse-args'\n\n// Get the shared file URL from Deno.args or by prompting\nconst args = parseArgs(Deno.args, { collect: ['filter', 'ignore'] })\nconst url = args._[0] ?? prompt('Enter the URL of a shared MEGA file or folder:')\n\n// Create a File object\nconst mainFile = File.fromURL(url)\n\n// Setup an user-agent\nmainFile.api.userAgent = 'MEGAJS-Demos (+https://mega.js.org/)'\n\n// Load attributes and get the selected file\nconst selectedNode = await mainFile.loadAttributes()\n\n// Download the file\nif (!selectedNode.name) throw Error('You should include the decryption key!')\nawait downloadFile(selectedNode, args.dir ?? Deno.cwd())\n\nasync function downloadFile (megaFile, folderPath) {\n  // Checks for directory nodes\n  if (megaFile.directory) {\n    // Create a new directory or use an existent one\n    const childFolderPath = join(folderPath, megaFile.name)\n    const childFolderStats = await Deno.stat(childFolderPath).catch(() => null)\n    if (!childFolderStats) {\n      await Deno.mkdir(childFolderPath)\n    } else if (!childFolderStats.isDirectory) {\n      throw Error(childFolderPath + ' is not a directory!')\n    }\n\n    // Download files into it\n    for (const child of megaFile.children) {\n      await downloadFile(child, childFolderPath)\n    }\n    return\n  }\n\n  // Handle filters (files need to match all filters)\n  if (args.filter) {\n    for (const filter of args.filter) {\n      if (!megaFile.name.includes(filter)) return\n    }\n  }\n  // Handle ignores (files need to not match all ignores)\n  if (args.ignore) {\n    for (const ignore of args.ignore) {\n      if (megaFile.name.includes(ignore)) return\n    }\n  }\n\n  // Check the file stats in order to handle finished or interrupted downloads\n  const filePath = join(folderPath, megaFile.name)\n  const fileStats = await Deno.stat(filePath).catch(() => null)\n\n  // Skip if there is no data left to download\n  if (fileStats && fileStats.size >= megaFile.size) return\n\n  console.log('Downloading', megaFile.name, 'into', '\"' + folderPath + '\"')\n  if (fileStats) console.log('Continuing interrupted download at', fileStats.size, 'bytes')\n\n  // Open file for writing and get the writer\n  const denoFile = fileStats\n    ? await Deno.open(filePath, { append: true })\n    : await Deno.create(filePath)\n  const writer = denoFile.writable.getWriter()\n\n  // You need to set forceHttps to false in order to make\n  // Deno connect to the unsafe MEGA download servers\n  // (which use out-of-date TLS configurations)\n  // That's not needed in Node.js nor in browsers\n  const downloadStream = await megaFile.download({\n    // Start is needed to handle interrupted downloads\n    start: fileStats ? fileStats.size : 0,\n    forceHttps: false\n  })\n\n  // Iterate the download stream and write to the file\n  for await (const data of downloadStream) {\n    await writer.write(data)\n  }\n\n  // Finally close the writer\n  await writer.close()\n\n  // Verify the file if the download started mid-file\n  if (fileStats) {\n    const verifyDenoFile = await Deno.open(filePath)\n    const verifyReader = verifyDenoFile.readable.getReader()\n    const verifyStream = verify(megaFile.key)\n\n    // Handle the end and error events\n    const verifyResultPromise = new Promise(resolve => {\n      verifyStream.on('end', () => resolve(false))\n      verifyStream.on('error', () => resolve(true))\n    })\n\n    // Convert from ReadableStream to a Node.js stream\n    while (true) {\n      const result = await verifyReader.read()\n\n      if (result.value) {\n        const canContinueWritting = verifyStream.write(result.value)\n        if (!canContinueWritting) {\n          // Verify stream is under pressure, wait it to drain\n          await new Promise(resolve => verifyStream.once('drain', resolve))\n        }\n      }\n\n      if (result.done) {\n        // End the stream when there is no more data to be read\n        verifyStream.end()\n\n        // And break out the while loop\n        break\n      }\n    }\n\n    // Warn the user if the file is corrupt\n    const isFileValid = await verifyResultPromise\n    if (isFileValid) {\n      console.log(filePath, 'was been downloaded and verified')\n    } else {\n      console.log(filePath, 'is corrupt')\n      await Deno.rename(filePath, filePath + '.corrupt')\n    }\n  } else {\n    console.log(filePath, 'was been downloaded')\n  }\n}\n",s={sidebar_position:4.05},d="Advanced file downloader",l={id:"examples/advanced-file-downloader",title:"Advanced file downloader",description:"This script downloads shared files and scripts handling folders and interrupted downloads.",source:"@site/docs/examples/advanced-file-downloader.md",sourceDirName:"examples",slug:"/examples/advanced-file-downloader",permalink:"/docs/1.0/examples/advanced-file-downloader",draft:!1,unlisted:!1,editUrl:"https://github.com/qgustavor/megajs-docs/tree/main/docs/examples/advanced-file-downloader.md",tags:[],version:"current",sidebarPosition:4.05,frontMatter:{sidebar_position:4.05},sidebar:"tutorialSidebar",previous:{title:"Shared file streaming",permalink:"/docs/1.0/examples/shared-file-streaming"},next:{title:"Project distribution",permalink:"/docs/1.0/examples/project-distribution"}},c={},f=[];function h(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"advanced-file-downloader",children:"Advanced file downloader"}),"\n",(0,i.jsx)(n.p,{children:"This script downloads shared files and scripts handling folders and interrupted downloads."}),"\n",(0,i.jsx)(n.p,{children:"You can try by running this code at your console:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"deno run https://mega.js.org/demos/advanced-file-downloader.js [URL] [...flags]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you don't specify a URL one will be prompted. You can use ",(0,i.jsx)(n.code,{children:"--filter=..."})," to download only files containing the filter string in the name and ",(0,i.jsx)(n.code,{children:"--ignore=..."})," to skip all files containing the ignore string in the name. You can use ",(0,i.jsx)(n.code,{children:"--dir=..."})," to specify a target directory (current working directory by default)."]}),"\n","\n",(0,i.jsx)(r.A,{language:"js",children:a})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);