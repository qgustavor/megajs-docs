"use strict";(self.webpackChunkmegajs_docs=self.webpackChunkmegajs_docs||[]).push([[82],{7598:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var n=o(4848),r=o(8453),s=o(1432);const a="import { getLoggedInStorage } from './logging-in-demo.js'\nimport * as path from 'https://deno.land/std@0.188.0/path/mod.ts'\nimport prettyBytes from 'npm:pretty-bytes'\nimport ProgressBar from 'https://deno.land/x/progress@v1.4.5/mod.ts'\n\n// Generate a 7z file by compressing a ../dist folder (requires 7z in the path)\nconst buildName = new Date().toISOString().slice(0, 13) + '.7z'\nconst buildPath = path.fromFileUrl(new URL('./' + buildName, import.meta.url))\nconst rootPath = path.fromFileUrl(new URL('../dist', import.meta.url))\nconst command = new Deno.Command('7z', {\n  args: ['a', buildPath, rootPath]\n})\nconst { code, stderr } = await command.output()\nif (code !== 0) {\n  console.error(new TextDecoder().decode(stderr))\n  throw Error(`7z exited with ${code}`)\n}\nconst data = await Deno.readFile(buildPath)\nconsole.log('Got a', data.length, 'byte (' + prettyBytes(data.length) + ') bundle')\n\n// Log in intro MEGA\nconst storage = await getLoggedInStorage()\n\n// Try to find a folder where files will be shared\nconst rootFolderName = 'Distributed files'\nlet rootFolder = storage.find(rootFolderName)\n\n// If no folder is found, ask user if the script can create one\nif (!rootFolder) {\n  console.log('Root folder not found, create one?')\n  const promptResult = window.confirm('>')\n  if (!promptResult) throw Error('Aborted')\n    \n  // If allowed, the script will create the folder and share it with a custom key\n  rootFolder = await storage.mkdir(rootFolderName)\n  const link = await rootFolder.link({ key: 'DeepSeaTreasureHunting' })\n  console.log('Base folder created and shared:', link)\n}\n\n// Prune folder\nif (rootFolder.children) {\n  // Sort files in the folder by timestamp, them remove the first most recent ones from the array\n  const childToDelete = rootFolder.children.slice().sort((a, b) => {\n    return b.timestamp - a.timestamp\n  }).slice(10)\n  \n  // Them delete all files that remained\n  for (const entry of childToDelete) {\n    await entry.delete(true)\n  }\n  \n  // Check if a duplicate file exists and, if so, delete it\n  const duplicateBuild = rootFolder.find(buildName)\n  if (duplicateBuild) await duplicateBuild.delete(true)\n}\n\n// Create a progress bar to track the upload progress\nconst progressBar = new ProgressBar({\n  display: ':title :percent :bar :time/:eta',\n  title: 'Uploading ' + buildName + ':',\n  total: data.length\n})\nprogressBar.render(0)\n\n// Upload the file\nconst uploadStream = rootFolder.upload({\n  name: buildName,\n  // Seems that setting maxConnections to 1 improved results\n  maxConnections: 1,\n  // Because... the same reason shown as in all other examples\n  forceHttps: false\n}, data)\n\n// Handle progress events\nuploadStream.on('progress', event => {\n  progressBar.render(event.bytesUploaded)\n})\n\n// Create a timeout to handle bad network connections\n// (at the time I implemented this code my Internet connection was really bad)\nconst maxTimeout = 36e5 // 60 minutes\nlet timeoutTimer\nlet exitCode = 0\ntry {\n  await Promise.race([\n    uploadStream.complete,\n    new Promise((resolve, reject) => {\n      timeoutTimer = setTimeout(reject, maxTimeout, Error('Upload timeout out'))\n    })\n  ])\n\n  console.log('\\n\\n' + buildName, 'was uploaded')\n} catch (error) {\n  console.error(error)\n  exitCode = 1\n}\n\n// Clear up things\nclearTimeout(timeoutTimer)\nawait storage.close().catch(() => { /* Ignore errors at this step */ })\nawait Deno.remove(buildPath)\nDeno.exit(exitCode)\n",i={sidebar_position:4.1},d="Project distribution",l={id:"examples/project-distribution",title:"Project distribution",description:'This code is sourced from a real world application (with some few modifications). It compresses a "dist" folder containing a compiled version of a project then uploads to MEGA. This code automatically creates a folder if it didn\'t finds one and share with a custom key. It also prunes the folder, removing old versions of the project. It includes a progress bar to track upload progress and handle upload timeouts caused by bad Internet connections.',source:"@site/docs/examples/project-distribution.md",sourceDirName:"examples",slug:"/examples/project-distribution",permalink:"/docs/1.0/examples/project-distribution",draft:!1,unlisted:!1,editUrl:"https://github.com/qgustavor/megajs-docs/tree/main/docs/examples/project-distribution.md",tags:[],version:"current",sidebarPosition:4.1,frontMatter:{sidebar_position:4.1},sidebar:"tutorialSidebar",previous:{title:"Recursive folder uploading",permalink:"/docs/1.0/examples/recursive-folder-uploading"},next:{title:"Folder shared with custom key",permalink:"/docs/1.0/examples/custom-key-folder-share"}},c={},m=[];function p(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"project-distribution",children:"Project distribution"}),"\n",(0,n.jsx)(t.p,{children:'This code is sourced from a real world application (with some few modifications). It compresses a "dist" folder containing a compiled version of a project then uploads to MEGA. This code automatically creates a folder if it didn\'t finds one and share with a custom key. It also prunes the folder, removing old versions of the project. It includes a progress bar to track upload progress and handle upload timeouts caused by bad Internet connections.'}),"\n",(0,n.jsx)(t.p,{children:"You can try by running this code at your console:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"deno run https://mega.js.org/demos/project-distribution-demo.js\n"})}),"\n","\n",(0,n.jsx)(s.A,{language:"js",children:a})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>a,x:()=>i});var n=o(6540);const r={},s=n.createContext(r);function a(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);