"use strict";(self.webpackChunkmegajs_docs=self.webpackChunkmegajs_docs||[]).push([[542],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),g=o,m=p["".concat(s,".").concat(g)]||p[g]||d[g]||r;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1163:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return g},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],l={sidebar_position:7},s="Advanced usage",c={unversionedId:"tutorial/advanced",id:"version-0.17/tutorial/advanced",title:"Advanced usage",description:"Downloading shared files using account limits",source:"@site/versioned_docs/version-0.17/tutorial/advanced.md",sourceDirName:"tutorial",slug:"/tutorial/advanced",permalink:"/docs/0.17/tutorial/advanced",editUrl:"https://github.com/qgustavor/megajs-docs/tree/master/versioned_docs/version-0.17/tutorial/advanced.md",tags:[],version:"0.17",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Downloading files",permalink:"/docs/0.17/tutorial/downloading"},next:{title:"Security",permalink:"/docs/0.17/tutorial/security"}},u={},d=[{value:"Downloading shared files using account limits",id:"downloading-shared-files-using-account-limits",level:2},{value:"Setting request configuration",id:"setting-request-configuration",level:2},{value:"Resuming a download",id:"resuming-a-download",level:2},{value:"Downloading then decrypting",id:"downloading-then-decrypting",level:2},{value:"Encrypting then uploading",id:"encrypting-then-uploading",level:2},{value:"Uploading without encryption",id:"uploading-without-encryption",level:2}],p={toc:d};function g(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"advanced-usage"},"Advanced usage"),(0,r.kt)("h2",{id:"downloading-shared-files-using-account-limits"},"Downloading shared files using account limits"),(0,r.kt)("p",null,"Files created with ",(0,r.kt)("inlineCode",{parentName:"p"},"new File")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"File.fromURL")," by default use a non-logged API instance and can be quite limited. To work around those limits accounts can be used, so downloading will use the limits from those:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// First log in\nconst storage = new Storage(options, callback)\n\n// Wait for the callback then get a shared file\nconst sharedFile = File.fromURL(url)\n\n// Finally replace the non-logged API instance with the logged instance\nsharedFile.api = storage.api\n\n// Now downloading the shared file will use the limits from that account\n")),(0,r.kt)("h2",{id:"setting-request-configuration"},"Setting request configuration"),(0,r.kt)("p",null,"In version 0.xx ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/request"},"request")," is used to handle HTTP(s) connections with MEGA servers. It can be configured like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Get a File or Storage object\nlet file = File.fromURL(url)\nlet storage = new Storage(options, callback)\n\n// The request module can be acessed using:\nfile.api.requestModule\nstorage.api.requestModule\n\n// It can be overwritten, so if you need to set up a proxy\nfile.api.requestModule = file.api.requestModule.defaults({\n  proxy: 'your proxy url'\n})\n\n// Storage logins up automatically, so if you may want to disable autologin\nstorage = new Storage({ ..., autologin: false })\n// configure request like shown above then login\nstorage.login(callback)\n")),(0,r.kt)("p",null,"If possible use this to set up a user-agent."),(0,r.kt)("h2",{id:"resuming-a-download"},"Resuming a download"),(0,r.kt)("p",null,"When a download fails it will stop the stream you need to create other stream in order to resume it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let file = File.fromURL(url)\nlet filename = 'filename.ext'\n\nlet start = fs.statSync(filename).size\n\nfile.download({ start })\n  .pipe(fs.createWriteStream(filename, {\n    flags: 'r+', // <= set flags to prevent overwriting the file\n    start\n  }))\n")),(0,r.kt)("h2",{id:"downloading-then-decrypting"},"Downloading then decrypting"),(0,r.kt)("p",null,"If you want to download then decrypt, not the two at the same time, then do the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let file = File.fromURL(url)\n\n// Download it using cipher\nfile.download({ cipher: true })\n  .pipe(fs.createWriteStream('filename.ext.enc'))\n\n// Later decrypt it using decrypt\nfs.readFileStream('filename.ext.enc')\n  .pipe(decrypt('base64 file key'))\n  .pipe(fs.createWriteStream('filename.ext'))\n")),(0,r.kt)("p",null,"I find hard someone having to do that, but maybe it's useful for someone as seems ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tonistiigi/mega"},"tonistiigi")," supported it (by exporting the ",(0,r.kt)("inlineCode",{parentName:"p"},"decrypt")," function)."),(0,r.kt)("h2",{id:"encrypting-then-uploading"},"Encrypting then uploading"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let encryptStream = encrypt()\nfs.readFileStream('filename.ext')\n  .pipe(encryptStream)\n  .pipe(fs.createWriteStream('filename.ext.enc'))\n\n// Get the generated key\nencryptStream.on('end', () => {\n  console.log(encryptStream.key.toString('hex'))\n})\n\n// Later upload the encrypted file\nlet storage = new Storage(options, callback)\n\n// Wait for callback, then:\nstorage.upload({\n  uploadCiphertext: true,\n  key: Buffer.from('key from console.log', 'hex')\n})\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/tonistiigi/mega"},"tonistiigi's mega")," also exported an ",(0,r.kt)("inlineCode",{parentName:"p"},"encrypt")," function, so that's how you can use it. Do ",(0,r.kt)("strong",{parentName:"p"},"not")," forget the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," option when uploading!"),(0,r.kt)("h2",{id:"uploading-without-encryption"},"Uploading without encryption"),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This code does not work anymore due to changes in MEGA. For more info ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/qgustavor/mega/discussions/108"},"check this discussion"),"."))),(0,r.kt)("p",null,"Make MEGA work like any other file hosting service:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let storage = new Storage(options, callback)\n\n// Wait for callback, then:\nstorage.upload({\n  uploadCiphertext: true,\n  // This key will be used to encrypt the attributes\n  // Avoid reusing keys (like using `Buffer.alloc(32)`)\n  // as seems MEGA does some kind of caching on those\n  key: crypto.randomBytes(32)\n})\n")),(0,r.kt)("p",null,"To download do the ",(0,r.kt)("a",{parentName:"p",href:"#downloading-then-decrypting"},'"Downloading then decrypting"')," steps. Do ",(0,r.kt)("strong",{parentName:"p"},"not")," forget the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," option when uploading!"))}g.isMDXComponent=!0}}]);