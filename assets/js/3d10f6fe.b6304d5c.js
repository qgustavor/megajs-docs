"use strict";(self.webpackChunkmegajs_docs=self.webpackChunkmegajs_docs||[]).push([[248],{1776:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7462),o=(n(7294),n(3905)),l=n(1374);const r={sidebar_position:6},i="Downloading files",s={unversionedId:"tutorial/downloading",id:"tutorial/downloading",title:"Downloading files",description:"To share a download you call .downloadBuffer() or .download() on the file object:",source:"@site/docs/tutorial/downloading.md",sourceDirName:"tutorial",slug:"/tutorial/downloading",permalink:"/docs/1.0/tutorial/downloading",draft:!1,editUrl:"https://github.com/qgustavor/megajs-docs/tree/main/docs/tutorial/downloading.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Handling files",permalink:"/docs/1.0/tutorial/handling-files"},next:{title:"Interrupted downloads",permalink:"/docs/1.0/tutorial/interrupted-downloads"}},d={},p=[],u={toc:p},f="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(f,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"downloading-files"},"Downloading files"),(0,o.kt)("p",null,"To share a download you call ",(0,o.kt)("inlineCode",{parentName:"p"},".downloadBuffer()")," or ",(0,o.kt)("inlineCode",{parentName:"p"},".download()")," on the file object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Using promises\nconst data = await file.downloadBuffer()\n\n// data is a Buffer containing the file contents\nconsole.log(data)\n\n// Using callbacks\nfile.downloadBuffer((error, data) => {\n  if (error) console.error(error)\n  console.log(data)\n})\n")),(0,o.kt)("p",null,"If you use ",(0,o.kt)("inlineCode",{parentName:"p"},".download()")," then you can also download files using Node streams either via pipes..."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const stream = file.download()\nstream.on('error', error => console.error(error))\nstream.pipe(fs.createWriteStream(file.name))\n")),(0,o.kt)("p",null,"... or by listening data events:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const stream = file.download()\nstream.on('error', error => console.error(error))\nstream.on('data', data => console.log(data))\n")),(0,o.kt)("p",null,"Those are useful when dealing with huge files as ",(0,o.kt)("inlineCode",{parentName:"p"},".downloadBuffer()")," stores the entire file in memory. In the other hand, because of that, ",(0,o.kt)("inlineCode",{parentName:"p"},".download()")," can't return a promise. Also, you can still use callbacks with ",(0,o.kt)("inlineCode",{parentName:"p"},".download()")," like in V0."),(0,o.kt)("p",null,"You can get progress events from the ",(0,o.kt)("inlineCode",{parentName:"p"},"progress")," event like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const stream = file.download()\nstream.on('progress', info => {\n  console.log('Loaded', info.bytesLoaded, 'bytes of', info.bytesTotal)\n})\n")),(0,o.kt)("p",null,"In order to render the values returned by the ",(0,o.kt)("inlineCode",{parentName:"p"},"progress")," event you have many options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"For browsers you can use ",(0,o.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress"},"the ",(0,o.kt)("inlineCode",{parentName:"a"},"<progress>")," element")," or libraries such as ",(0,o.kt)("a",{parentName:"li",href:"https://kimmobrunfeldt.github.io/progressbar.js/"},"progressbar.js"),";"),(0,o.kt)("li",{parentName:"ul"},"For Node.js there are libraries such as ",(0,o.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/cli-progress"},"cli-progress")," and ",(0,o.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/progress"},"progress"),";"),(0,o.kt)("li",{parentName:"ul"},"Other runtimes - like Bun - might support one or more of the above.")),(0,o.kt)("p",null,"You can download shared files by loading those from their URL instead of loading from the Storage class:"),(0,o.kt)(l.Z,{language:"js",code:"import { File } from 'megajs'\n\n// Get the file object from the URL\nconst file = File.fromURL('https://mega.nz/file/example#example')\n// node2deno:if-deno\nfile.api.userAgent = null\n\n// Load file attributes\nawait file.loadAttributes()\n\n// Then finally download the file like usual\nconst data = await file.downloadBuffer()\nconsole.log(data)",version:"1",mdxType:"CodeBlockSwitchable"}),(0,o.kt)("p",null,"When deploying to browsers use ",(0,o.kt)("inlineCode",{parentName:"p"},"file.api.userAgent = null")," to not set an user-agent since it will cause CORS issues on browsers that allow the ",(0,o.kt)("inlineCode",{parentName:"p"},"user-agent")," header to be set (like Firefox)."),(0,o.kt)("p",null,"Shared files loaded using ",(0,o.kt)("inlineCode",{parentName:"p"},"File.fromURL")," don't have attributes - such as name and size - loaded by default, that's why ",(0,o.kt)("inlineCode",{parentName:"p"},"loadAttributes")," is called. If you don't need those attributes, just file contents, you can download the file directly using ",(0,o.kt)("inlineCode",{parentName:"p"},".download()"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Will download the data without having to load attributes\nconst data = await File.fromURL('https://mega.nz/file/example#example').downloadBuffer()\nconsole.log(data)\n")),(0,o.kt)("p",null,"Shared folders can also be loaded using ",(0,o.kt)("inlineCode",{parentName:"p"},"File.fromURL")," and will behave like folders in ",(0,o.kt)("inlineCode",{parentName:"p"},"Storage"),": once their attributes are loaded they will have a ",(0,o.kt)("inlineCode",{parentName:"p"},".children")," property with an array of File objects which can be downloaded."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Get the folder object from the URL\nconst folder = File.fromURL('https://mega.nz/folder/example#example')\n\n// Load folder attributes\nawait folder.loadAttributes()\n\n// Download a file from the folder\nconst file = folder.children.find(file => file.name === 'hello-world.txt')\nconst data = await file.downloadBuffer()\nconsole.log(data)\n")),(0,o.kt)("p",null,"When opening shared folders in MEGA you can right-click some file and get a file pointing to a specific file in the folder. This library recognizes those kind of links and allow loading the file specified. To make it work get the file from the promise, like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Get the folder object from the URL\nconst folder = File.fromURL('https://mega.nz/folder/example#example/file/example')\n\n// Load the file from the folder specified by /file/example in the URL\nconst file = await folder.loadAttributes()\n\n// And download it\nconst data = await file.downloadBuffer()\nconsole.log(data)\n")),(0,o.kt)("p",null,"Like V0 ",(0,o.kt)("inlineCode",{parentName:"p"},".loadAttributes()")," will still accept a callback. The file specified by the URL will be returned in the second argument:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"folder.loadAttributes((error, file) => {})\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"download")," function also allows using a custom ",(0,o.kt)("inlineCode",{parentName:"p"},"handleRetries")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"await file.download(\n  handleRetries: (tries, error, cb) => {\n    if (tries > 8) {\n      // Give up after eight retries\n      cb(error)\n    } else {\n      // Wait some time then try again\n      setTimeout(cb, 1000 * Math.pow(2, tries))\n    }\n  }\n}).complete\n")),(0,o.kt)("p",null,"You can replace the default retry handling function by overriding ",(0,o.kt)("inlineCode",{parentName:"p"},"File.defaultHandleRetries")," like this:"),(0,o.kt)(l.Z,{language:"js",code:"import { File } from 'megajs'\n\nFile.defaultHandleRetries = (tries, error, cb) => {\n  if (tries > 8) {\n    // Give up after eight retries\n    cb(error)\n  } else {\n    // Wait some time then try again\n    setTimeout(cb, 1000 * Math.pow(2, tries))\n  }\n}",version:"1",mdxType:"CodeBlockSwitchable"}),(0,o.kt)("p",null,"The function in ",(0,o.kt)("inlineCode",{parentName:"p"},"File.defaultHandleRetries")," is also the default function used by ",(0,o.kt)("inlineCode",{parentName:"p"},"upload()"),"."),(0,o.kt)("p",null,"The last part of the tutorial is handling interrupted downloads."))}c.isMDXComponent=!0}}]);