"use strict";(self.webpackChunkmegajs_docs=self.webpackChunkmegajs_docs||[]).push([[886],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(n),f=o,m=d["".concat(s,".").concat(f)]||d[f]||c[f]||a;return n?r.createElement(m,l(l({ref:t},p),{},{components:n})):r.createElement(m,l({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var u=2;u<a;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3118:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return c}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),l=["components"],i={sidebar_position:4},s="Uploading files",u={unversionedId:"tutorial/uploading",id:"version-0.17/tutorial/uploading",title:"Uploading files",description:"Once you logged into your account you can upload files by calling storage.upload():",source:"@site/versioned_docs/version-0.17/tutorial/uploading.md",sourceDirName:"tutorial",slug:"/tutorial/uploading",permalink:"/docs/0.17/tutorial/uploading",editUrl:"https://github.com/qgustavor/megajs-docs/tree/master/versioned_docs/version-0.17/tutorial/uploading.md",tags:[],version:"0.17",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Logging in",permalink:"/docs/0.17/tutorial/login"},next:{title:"Handling files",permalink:"/docs/0.17/tutorial/handling-files"}},p={},c=[],d={toc:c};function f(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"uploading-files"},"Uploading files"),(0,a.kt)("p",null,"Once you logged into your account you can upload files by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"storage.upload()"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"storage.upload('hello-world.txt', 'Hello world!', (error, file) => {\n  if (error) return console.error('There was an error:', error)\n  console.log('The file was uploaded!', file)\n})\n")),(0,a.kt)("p",null,"The upload function is one of the most complex functions in the library because it's quite flexible. In the example above you pass the file name in the first argument, the file contents in the second and wait for a callback."),(0,a.kt)("p",null,"You can input an options object too:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"storage.upload({\n  name: 'hello-world.txt'\n}, 'Hello world!', (error, file) => {\n  if (error) return console.error('There was an error:', error)\n  console.log('The file was uploaded!', file)\n})\n")),(0,a.kt)("p",null,"It allows you setting more options, some which will be explained later. The complete list of options are listed in the ",(0,a.kt)("a",{parentName:"p",href:"/docs/0.17/api"},"API reference page"),"."),(0,a.kt)("p",null,"You can use Buffers to input file content, like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"storage.upload('hello-world.txt', Buffer.from('SGVsbG8gd29ybGQh', 'base64'), (error, file) => {\n  if (error) return console.error('There was an error:', error)\n  console.log('The file was uploaded!', file)\n})\n")),(0,a.kt)("p",null,"Node readable streams are also supported as inputs, ",(0,a.kt)("strong",{parentName:"p"},"but")," then you also need to specify a file size in the options:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"storage.upload({\n  name: 'hello-world.txt',\n  size: 12\n}, fs.createReadStream('hello-world.txt'), (error, file) => {\n  if (error) return console.error('There was an error:', error)\n  console.log('The file was uploaded!', file)\n})\n")),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"If you forget to specify the file size the entire stream will be buffered in memory, which will cause issues when uploading large files. Because is quite easy to make this mistake in V1 it is not allowed to upload without setting the size or explicitly enabling buffering."))),(0,a.kt)("p",null,"Finally piping is another way to uploading files:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const fileStream = fs.createReadStream('hello-world.txt')\nconst uploadStream = storage.upload({\n  name: 'hello-world.txt',\n  size: 12\n})\nfileStream.pipe(uploadStream)\nuploadStream.on('complete', file) => {\n  console.log('The file was uploaded!', file)\n})\nuploadStream.on('error', error) => {\n  console.log('The file was uploaded!', file)\n})\n")),(0,a.kt)("p",null,"After uploading you will get a ",(0,a.kt)("inlineCode",{parentName:"p"},"File")," object either via the callback or the ",(0,a.kt)("inlineCode",{parentName:"p"},"complete")," event. In the next part of this tutorial we will share this file and do other operations on it."))}f.isMDXComponent=!0}}]);