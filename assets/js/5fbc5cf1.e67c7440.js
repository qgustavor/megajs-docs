"use strict";(self.webpackChunkmegajs_docs=self.webpackChunkmegajs_docs||[]).push([[207],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return c}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(n),c=i,k=m["".concat(d,".").concat(c)]||m[c]||u[c]||l;return n?a.createElement(k,r(r({ref:t},p),{},{components:n})):a.createElement(k,r({ref:t},p))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=m;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1374:function(e,t,n){n.d(t,{Z:function(){return o}});var a=n(7294),i=n(1736),l=n(9877),r=n(8215);n(2263);function o(e){var t=e.version||"0",n=["Node ESM","Node CJS",parseInt(t.split(".")[0])>0?"Browser/Deno":"Browser"],o=[function(e){return e.replace(/\/\/ node2deno:if-deno\n.*\n?/g,"").replace(/\/\/ node2deno:if-node\n/g,"")},function(e){return(e=e.replace(/\/\/ node2deno:if-deno\n.*\n?/g,"").replace(/\/\/ node2deno:if-node\n/g,"")).includes("await ")&&(e=e.replace(/^(?!import|$)/gm,"  ").replace(/^\s*$/m,"\n// Node don't support top-level await when using CJS\n;(async function () {").replace(/\n*$/,"\n}()).catch(error => {\n  console.error(error)\n  process.exit(1)\n})\n")),e=e.replace(/import (.+?) from 'megajs'/g,"const $1 = require('megajs')")},function(e){return e.replace(/import (.+?) from 'megajs'/g,'// @deno-types="https://cdn.skypack.dev/megajs@'+t+"/types/es.d.ts\"\nimport $1 from 'https://cdn.skypack.dev/megajs@"+t+"'").replace(/\/\/ node2deno:if-node\n.*\n/g,"").replace(/\/\/ node2deno:if-deno\n/g,"")}];return a.createElement("div",null,a.createElement(l.Z,{groupId:"node2deno",className:"margin-bottom--sm"},n.map((function(t,n){return a.createElement(r.Z,{value:n,label:t,onClick:function(){return setMode(n)},key:"+"+n},a.createElement(i.Z,{language:e.language},o[n](e.code)))}))))}},7480:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return d},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return c}});var a=n(7462),i=n(3366),l=(n(7294),n(3905)),r=n(1374),o=["components"],d={sidebar_position:2},s="API Reference",p={unversionedId:"api",id:"api",title:"API Reference",description:"Promises",source:"@site/docs/api.md",sourceDirName:".",slug:"/api",permalink:"/docs/next/api",editUrl:"https://github.com/qgustavor/mega-docs/tree/master/docs/api.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Security",permalink:"/docs/next/tutorial/security"},next:{title:"Migrating from V0",permalink:"/docs/next/migrating-from-v0"}},u=[{value:"Promises",id:"promises",children:[],level:2},{value:"Entry point",id:"entry-point",children:[],level:2},{value:"Storage",id:"storage",children:[{value:"Creation",id:"creation",children:[],level:3},{value:"Options",id:"options",children:[],level:3},{value:"Properties",id:"properties",children:[],level:3},{value:"Methods",id:"methods",children:[{value:"<code>.reload()</code>",id:"reload",children:[],level:4},{value:"<code>.login()</code>",id:"login",children:[],level:4},{value:"<code>.getAccountInfo()</code>",id:"getaccountinfo",children:[],level:4}],level:3},{value:"Events",id:"events",children:[],level:3}],level:2},{value:"File",id:"file",children:[{value:"Creation",id:"creation-1",children:[],level:3},{value:"Options",id:"options-1",children:[],level:3},{value:"Properties",id:"properties-1",children:[],level:3},{value:"Methods",id:"methods-1",children:[{value:"<code>.loadAttributes()</code>",id:"loadattributes",children:[],level:4},{value:"<code>.download([options], [callback])</code>",id:"downloadoptions-callback",children:[],level:4},{value:"<code>.downloadBuffer([options])</code>",id:"downloadbufferoptions",children:[],level:4}],level:3},{value:"Static methods",id:"static-methods",children:[{value:"<code>File.fromURL(url, [options])</code>",id:"filefromurlurl-options",children:[],level:4},{value:"<code>File.defaultHandleRetries(tries, error, cb)</code>",id:"filedefaulthandleretriestries-error-cb",children:[],level:4}],level:3}],level:2},{value:"Mutable File",id:"mutable-file",children:[{value:"Basic syntax",id:"basic-syntax",children:[],level:3},{value:"Methods",id:"methods-2",children:[{value:"<code>.upload(options | name, [data], [callback])</code>",id:"uploadoptions--name-data-callback",children:[],level:4},{value:"<code>.mkdir(options | name)</code>",id:"mkdiroptions--name",children:[],level:4},{value:"<code>.importFile(File | URL)</code>",id:"importfilefile--url",children:[],level:4},{value:"<code>.link([options])</code> / <code>.shareFolder([options])</code>",id:"linkoptions--sharefolderoptions",children:[],level:4},{value:"<code>.unshare()</code> / <code>.unshareFolder()</code>",id:"unshare--unsharefolder",children:[],level:4},{value:"<code>.delete(permanent)</code>",id:"deletepermanent",children:[],level:4},{value:"<code>.moveTo(target)</code>",id:"movetotarget",children:[],level:4},{value:"<code>.setAttributes(attributes)</code>",id:"setattributesattributes",children:[],level:4},{value:"<code>.uploadAttribute(type, [buffer|stream])</code>",id:"uploadattributetype-bufferstream",children:[],level:4},{value:"<code>.rename(newFileName)</code>",id:"renamenewfilename",children:[],level:4},{value:"<code>.setLabel(label)</code>",id:"setlabellabel",children:[],level:4},{value:"<code>.setFavorite(isFavorite)</code>",id:"setfavoriteisfavorite",children:[],level:4}],level:3},{value:"Events",id:"events-1",children:[],level:3}],level:2},{value:"API",id:"api",children:[{value:"Properties",id:"properties-2",children:[],level:3},{value:"Static functions",id:"static-functions",children:[{value:"<code>API.getGlobalApi()</code>",id:"apigetglobalapi",children:[],level:4}],level:3}],level:2},{value:"Low level functions",id:"low-level-functions",children:[],level:2}],m={toc:u};function c(e){var t=e.components,n=(0,i.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"api-reference"},"API Reference"),(0,l.kt)("h2",{id:"promises"},"Promises"),(0,l.kt)("p",null,"Promise support was added in V1. All functions which used to accept callbacks now also accept promises, except by:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"new Storage()"),": the promise is available in the ",(0,l.kt)("inlineCode",{parentName:"li"},".ready")," property;"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".upload()"),": the promise is available in the ",(0,l.kt)("inlineCode",{parentName:"li"},".complete")," property;"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".download()"),": call ",(0,l.kt)("inlineCode",{parentName:"li"},".downloadBuffer()")," instead;")),(0,l.kt)("h2",{id:"entry-point"},"Entry point"),(0,l.kt)("p",null,"The exported classes and functions are those below:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Storage")," class"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"File")," class"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"file"),": alias to ",(0,l.kt)("inlineCode",{parentName:"li"},"File.fromURL")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"API")," class"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"encrypt"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"decrypt")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"verify")," (low level encryption streams)")),(0,l.kt)("h2",{id:"storage"},"Storage"),(0,l.kt)("p",null,"Creates a logged in connection instance to MEGA."),(0,l.kt)("h3",{id:"creation"},"Creation"),(0,l.kt)(r.Z,{language:"js",code:"import { Storage } from 'megajs'\nconst storage = new Storage(options, [callback])",version:"1",mdxType:"CodeBlockSwitchable"}),(0,l.kt)("h3",{id:"options"},"Options"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"email")," - User login email ",(0,l.kt)("strong",{parentName:"li"},"required"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"password")," - User password ",(0,l.kt)("strong",{parentName:"li"},"required"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"keepalive")," - Keep connection open to receive server-to-client requests that will be mapped to events. Defaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"true"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"autologin")," - Logins to MEGA. Defaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"true"),". Set to ",(0,l.kt)("inlineCode",{parentName:"li"},"false")," if you want to change request options, like proxy, ",(0,l.kt)("a",{parentName:"li",href:"/docs/next/tutorial/advanced#setting-request-configuration"},"like shown here"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"autoload")," - Load in file structure. Defaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"true"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"api")," - an API object."),(0,l.kt)("li",{parentName:"ul"},"All arguments supported by the API class (in case an API object is not provided).")),(0,l.kt)("p",null,"Temporary accounts aren't supported. Trying to login without an email or password will throw an error."),(0,l.kt)("h3",{id:"properties"},"Properties"),(0,l.kt)("p",null,"Only loaded after ",(0,l.kt)("inlineCode",{parentName:"p"},".resolve"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"readyCallback()")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"ready")," event fires."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name")," - Account owner name"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"user")," - Account ID"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"key")," - Account master key"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"sid")," - Current session ID"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"files")," - Hash of ",(0,l.kt)("inlineCode",{parentName:"li"},"MutableFile")," objects by node IDs."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"root")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MutableFile")," object for Cloud Drive main directory"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"trash")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MutableFile")," object for Rubbish bin"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"inbox")," - ",(0,l.kt)("inlineCode",{parentName:"li"},"MutableFile")," object for Inbox"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"mounts")," - Array of all top level directories")),(0,l.kt)("h3",{id:"methods"},"Methods"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},".upload")," and ",(0,l.kt)("inlineCode",{parentName:"p"},".mkdir")," methods maps to ",(0,l.kt)("inlineCode",{parentName:"p"},"storage.root.upload")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"storage.root.mkdir")," methods."),(0,l.kt)("h4",{id:"reload"},(0,l.kt)("inlineCode",{parentName:"h4"},".reload()")),(0,l.kt)("p",null,"Reloads files tree. No need to call this if ",(0,l.kt)("inlineCode",{parentName:"p"},"autoload")," is used."),(0,l.kt)("h4",{id:"login"},(0,l.kt)("inlineCode",{parentName:"h4"},".login()")),(0,l.kt)("p",null,"Logins to MEGA. No need to call this if ",(0,l.kt)("inlineCode",{parentName:"p"},"autologin")," is used."),(0,l.kt)("h4",{id:"getaccountinfo"},(0,l.kt)("inlineCode",{parentName:"h4"},".getAccountInfo()")),(0,l.kt)("p",null,"Get info related to account and quota usage. It returns a object with the following properties:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"type"),": the account type"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"spaceUsed"),": the space used by the account, in bytes"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"spaceTotal"),": the total space avaliable, in bytes"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"downloadBandwidthUsed"),": the bandwidth quota used, in bytes"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"downloadBandwidthTotal"),": the total bandwidth quota avaliable, in bytes"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"sharedBandwidthUsed"),": the shared bandwidth quota used, in bytes"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"sharedBandwidthLimit"),": the total shared bandwidth quota avaliable, in bytes")),(0,l.kt)("h3",{id:"events"},"Events"),(0,l.kt)("p",null,"These events fire on file changes when ",(0,l.kt)("inlineCode",{parentName:"p"},"keepalive")," is used. The changes can be triggered from any session connected to the same account."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"add")," - New file/dir was added. Parameters: file."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"move")," - File was moved to another dir. Parameters: file, olddir."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"delete")," - File was deleted. Parameters: file."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"update")," - File was changed(renamed). Parameters: file.")),(0,l.kt)("h2",{id:"file"},"File"),(0,l.kt)("p",null,"Basic class that handle files and folders. Often used to handle ",(0,l.kt)("strong",{parentName:"p"},"shared")," files and folders."),(0,l.kt)("h3",{id:"creation-1"},"Creation"),(0,l.kt)(r.Z,{language:"js",code:"import { File } from 'megajs'\nconst fileFromUrl = File.fromURL(url)\nconst fileFromObject = new File({ downloadId, key })",version:"1",mdxType:"CodeBlockSwitchable"}),(0,l.kt)("p",null,"To avoid collisions with ",(0,l.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/File"},"the global ",(0,l.kt)("inlineCode",{parentName:"a"},"File")," object")," you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"import { File as MEGAFile } from 'megajs'")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"const { File: MEGAFile } = require('megajs')")," and use ",(0,l.kt)("inlineCode",{parentName:"p"},"MEGAFile")," instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"File"),"."),(0,l.kt)("h3",{id:"options-1"},"Options"),(0,l.kt)("p",null,"If a string is passed it needs to be a shared MEGA URL. It can be a ",(0,l.kt)("inlineCode",{parentName:"p"},"https://mega.co.nz")," or a ",(0,l.kt)("inlineCode",{parentName:"p"},"https://mega.nz")," file. The new URL format with ",(0,l.kt)("inlineCode",{parentName:"p"},"/file/")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"/folder/")," is also supported."),(0,l.kt)("p",null,"If an object is passed it needs to have the options below:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"downloadId"),": ",(0,l.kt)("a",{parentName:"li",href:"https://mega.nz/file/THIS_PART#...%60"},"https://mega.nz/file/THIS_PART#...`")," of the share link; a string."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"key"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"https://mega.nz/file/...#THIS_PART")," of the share link; string or a Buffer; optional."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"directory"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," if loading a shared folder.")),(0,l.kt)("p",null,"Both ",(0,l.kt)("inlineCode",{parentName:"p"},"new File")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"File.fromURL")," supports receiving either an API object via ",(0,l.kt)("inlineCode",{parentName:"p"},"api")," argument like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const fileFromUrl = File.fromURL(url, { api })\nconst fileFromObject = new File({ downloadId, key, api })\n")),(0,l.kt)("p",null,"This allows using an logged API object to increase download limits, as shown ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/tutorial/network-settings"},"here"),"."),(0,l.kt)("h3",{id:"properties-1"},"Properties"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name")," - File name*"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"attributes")," - Object of attributes*"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"size")," - File size"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"key")," - File key (buffer)*"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"timestamp")," - File creation time (unix timestamp in seconds)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nodeId")," - File ID"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"downloadId")," - Link ID to file. Only if created from link."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"directory")," - Boolean if file is directory."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"children")," - Array of files for directories.")),(0,l.kt)("p",null,"Values marked with ","*"," are ",(0,l.kt)("inlineCode",{parentName:"p"},"null")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined")," when an encryption key isn't specified."),(0,l.kt)("h3",{id:"methods-1"},"Methods"),(0,l.kt)("h4",{id:"loadattributes"},(0,l.kt)("inlineCode",{parentName:"h4"},".loadAttributes()")),(0,l.kt)("p",null,"Load and decrypt file attributes. Attributes normally contain file name (",(0,l.kt)("inlineCode",{parentName:"p"},"'n'"),") but is possible to put anything there, as long it can be encoded as JSON. Isn't needed for files loaded from logged sessions. Trying to call it in a ",(0,l.kt)("inlineCode",{parentName:"p"},"MutableFile")," will throw an error."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"await file.loadAttributes()\nfile.loadAttributes((err, file) => { })\n")),(0,l.kt)("p",null,"This function can be also be used to load file information contained in shared folders."),(0,l.kt)("h4",{id:"downloadoptions-callback"},(0,l.kt)("inlineCode",{parentName:"h4"},".download([options], [callback])")),(0,l.kt)("p",null,"Download and decrypt file contents into a readable stream or, if a callback is specified, into a buffer."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"file.download().pipe(fs.createWriteStream('myfile.txt'))\n\nfile.download((err, data) => {\n  // data is buffer\n})\n")),(0,l.kt)("p",null,"This function downloads files using chunked multiple parallel connections to speed up downloading. Similar to the MEGA implementation it first loads a 128KB chunk, then a 256KB, increasing it until it reaches 1MB. You can use the options below to control that."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"maxConnections"),": the number of parallel connections is defined (default: 4);"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"initialChunkSize"),": first chunk size, in bytes (default: 128KB);"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"chunkSizeIncrement"),": how many bytes to increment each time (default: 128KB);"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"maxChunkSize"),": maximum chunk size, in bytes (max 1MB);"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"returnCiphertext"),": if ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," the ciphertext will be returned, which can be decrypted later using ",(0,l.kt)("inlineCode",{parentName:"li"},"decrypt")," low level function."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"handleRetries"),": accepts a function to handle retries on chunk downloading errors, overrides the function defined by ",(0,l.kt)("inlineCode",{parentName:"li"},"File.defaultHandleRetries"),";"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"forceHttps"),": if set to ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," will download using HTTPS, if set to ",(0,l.kt)("inlineCode",{parentName:"li"},"false")," will download using HTTP. Default to ",(0,l.kt)("inlineCode",{parentName:"li"},"false")," in the Node build and ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," in the browser/Deno build. Set to ",(0,l.kt)("inlineCode",{parentName:"li"},"false")," if you are having TLS errors;")),(0,l.kt)("p",null,"The download function also support ",(0,l.kt)("inlineCode",{parentName:"p"},"start")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"end")," options, like ",(0,l.kt)("a",{parentName:"p",href:"https://nodejs.org/api/fs.html#fs_fs_createreadstream_path_options"},(0,l.kt)("inlineCode",{parentName:"a"},"fs.createReadStream")),"."),(0,l.kt)("p",null,"If the number of connections get limited to ",(0,l.kt)("inlineCode",{parentName:"p"},"1")," then chunking will be disabled and the entire file will be downloaded using a single connection. For some reason doing this often results in less connection errors. At the moment this feature relies on a node-fetch extension and might not work in non-Node environments."),(0,l.kt)("h4",{id:"downloadbufferoptions"},(0,l.kt)("inlineCode",{parentName:"h4"},".downloadBuffer([options])")),(0,l.kt)("p",null,"Wraps the ",(0,l.kt)("inlineCode",{parentName:"p"},".download()")," function and return a Promise which resolves to a Buffer containing the file data. Accept the same options as ",(0,l.kt)("inlineCode",{parentName:"p"},".download()"),". It still accepts a callback, but then it's better to call ",(0,l.kt)("inlineCode",{parentName:"p"},".download()")," to avoid creating an unneeded promise."),(0,l.kt)("h3",{id:"static-methods"},"Static methods"),(0,l.kt)("h4",{id:"filefromurlurl-options"},(0,l.kt)("inlineCode",{parentName:"h4"},"File.fromURL(url, [options])")),(0,l.kt)("p",null,"Creates a File object based on a shared file or folder URL. Accepts an optional options object with an ",(0,l.kt)("inlineCode",{parentName:"p"},"api")," object."),(0,l.kt)("h4",{id:"filedefaulthandleretriestries-error-cb"},(0,l.kt)("inlineCode",{parentName:"h4"},"File.defaultHandleRetries(tries, error, cb)")),(0,l.kt)("p",null,"Default function used by ",(0,l.kt)("inlineCode",{parentName:"p"},"File.protoype.download")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"MutableFile.protoype.upload")," to handle chunk downloading or upload should be retried on errors. Receives as arguments number of retries, the last error and a callback function."),(0,l.kt)("p",null,"This function can be overridden. Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// Default retry handler\nFile.defaultHandleRetries = (tries, error, cb) => {\n  if (tries > 8) {\n    cb(error)\n  } else {\n    setTimeout(cb, 1000 * Math.pow(2, tries))\n  }\n}\n\n// Restore behavior from V0\nFile.defaultHandleRetries = (tries, error, cb) => {\n  cb(error)\n}\n")),(0,l.kt)("h2",{id:"mutable-file"},"Mutable File"),(0,l.kt)("p",null,"Extends ",(0,l.kt)("inlineCode",{parentName:"p"},"File")," adding methods that are only available when logged in."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Please note:")," what are mutable are the attributes of the files and folders, ",(0,l.kt)("strong",{parentName:"p"},"not")," their contents, as this library don't support this yet."),(0,l.kt)("h3",{id:"basic-syntax"},"Basic syntax"),(0,l.kt)("p",null,"Those objects can be only accessed when logged in and can only be accessed via the properties of the ",(0,l.kt)("inlineCode",{parentName:"p"},"Storage")," object."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"storage.root.children[0] // the first file in the root of the storage\n")),(0,l.kt)("h3",{id:"methods-2"},"Methods"),(0,l.kt)("h4",{id:"uploadoptions--name-data-callback"},(0,l.kt)("inlineCode",{parentName:"h4"},".upload(options | name, [data], [callback])")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const uploadedFile = await folder.upload('myfile.txt', 'Hello world!').complete\nfs.createReadStream('myfile.txt').pipe(folder.upload('myfile.txt'))\nfolder.upload('myfile.txt', 'Hello world!', (error, uploadedFile) => {})\n")),(0,l.kt)("p",null,"Upload a file to a folder."),(0,l.kt)("p",null,"To input data you can input a buffer, string or stream in the data argument or, as it returns a ",(0,l.kt)("a",{parentName:"p",href:"https://nodejs.org/api/stream.html"},"stream"),", pipe data into it."),(0,l.kt)("p",null,"To handle upload completion or errors you can:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Await for the promise returned by ",(0,l.kt)("inlineCode",{parentName:"li"},".complete"),"."),(0,l.kt)("li",{parentName:"ul"},"Use the callback, which will return either an error as its first argument or the uploaded file instance as its second."),(0,l.kt)("li",{parentName:"ul"},"Listen for ",(0,l.kt)("inlineCode",{parentName:"li"},"complete")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"error")," events.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Supported options:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name"),": file name, ",(0,l.kt)("em",{parentName:"li"},(0,l.kt)("strong",{parentName:"em"},"required"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"attributes"),": object of file attributes"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"key"),": encryption key, Buffer or string; 192 bit; because MAC verification part of it be different in final key"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"size"),": file size, ",(0,l.kt)("em",{parentName:"li"},(0,l.kt)("strong",{parentName:"em"},"required")," unless ",(0,l.kt)("inlineCode",{parentName:"em"},"allowUploadBuffering")," is set to true"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"thumbnailImage"),": the Buffer or Stream of the thumbnail image"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"previewImage"),": the Buffer or Stream of the preview image"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"maxConnections"),": the number of parallel connections is defined (default: 4);"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"initialChunkSize"),": first chunk size, in bytes (default: 128KB);"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"chunkSizeIncrement"),": how many bytes to increment each time (default: 128KB);"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"maxChunkSize"),": maximum chunk size, in bytes (max 1MB);"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"handleRetries"),": accepts a function to handle retries on chunk downloading errors, overrides the function defined by ",(0,l.kt)("inlineCode",{parentName:"li"},"File.defaultHandleRetries"),";"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"forceHttps"),": if set to ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," will upload using HTTPS, if set to ",(0,l.kt)("inlineCode",{parentName:"li"},"false")," will upload using HTTP. Default to ",(0,l.kt)("inlineCode",{parentName:"li"},"false")," in the Node build and ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," in the browser/Deno build. Set to ",(0,l.kt)("inlineCode",{parentName:"li"},"false")," if you are having TLS errors;")),(0,l.kt)("p",null,"Thumbnail images are 120px x 120px JPEG images with 70% quality. Preview images are JPEG images with a maximum width and height size of 1000px and 75% quality. Please use those settings to avoid breaking compatibility with other MEGA clients. This library don't generates neither preview or thumbnail images, only provides a way to uploading those."),(0,l.kt)("p",null,"Uploading data without encryption is supported and ",(0,l.kt)("a",{parentName:"p",href:"/docs/next/tutorial/advanced#uploading-without-encryption"},"is documented here"),"."),(0,l.kt)("p",null,"The upload stream is always returned even when a callback is specified. Standard events for ",(0,l.kt)("a",{parentName:"p",href:"https://nodejs.org/api/stream.html#stream_class_stream_writable"},"Writable Streams"),", like ",(0,l.kt)("inlineCode",{parentName:"p"},"error")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"finish"),", and methods, like ",(0,l.kt)("inlineCode",{parentName:"p"},".pipe()")," and ",(0,l.kt)("inlineCode",{parentName:"p"},".write()"),", work normally."),(0,l.kt)("h4",{id:"mkdiroptions--name"},(0,l.kt)("inlineCode",{parentName:"h4"},".mkdir(options | name)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"await folder.mkdir('dirname')\n")),(0,l.kt)("p",null,"Create a new folder inside the current folder."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Supported options:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name"),": directory name, ",(0,l.kt)("em",{parentName:"li"},"required")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"attributes"),": object of file attributes"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"key"),": encryption key, Buffer or string; 128 bit; only used internally (when sharing folders other key is used)")),(0,l.kt)("h4",{id:"importfilefile--url"},(0,l.kt)("inlineCode",{parentName:"h4"},".importFile(File | URL)")),(0,l.kt)("p",null,"Import a file to the specified folder. It accepts File objects (from ",(0,l.kt)("inlineCode",{parentName:"p"},"new File"),") or URLs of shared files."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// Returns an instance of MutableFile\nconst file = await folder.importFile('https://mega.nz/#!...')\n")),(0,l.kt)("h4",{id:"linkoptions--sharefolderoptions"},(0,l.kt)("inlineCode",{parentName:"h4"},".link([options])")," / ",(0,l.kt)("inlineCode",{parentName:"h4"},".shareFolder([options])")),(0,l.kt)("p",null,"Make download link for a file or folder. ",(0,l.kt)("inlineCode",{parentName:"p"},".shareFolder")," only works for folders, ",(0,l.kt)("inlineCode",{parentName:"p"},".link")," works for both (but calls ",(0,l.kt)("inlineCode",{parentName:"p"},".shareFolder")," internally)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// Returns something like https://mega.nz/#!downloadId!key\nconst url = await file.link()\n")),(0,l.kt)("p",null,"Supported options:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"noKey"),": set ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," to return a url without an encryption key"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"key"),": only works for folders, encryption key, can be a string or buffer, 128 bit")),(0,l.kt)("h4",{id:"unshare--unsharefolder"},(0,l.kt)("inlineCode",{parentName:"h4"},".unshare()")," / ",(0,l.kt)("inlineCode",{parentName:"h4"},".unshareFolder()")),(0,l.kt)("p",null,"Unshares files and folders. ",(0,l.kt)("inlineCode",{parentName:"p"},".unshareFolder")," only works for folders, ",(0,l.kt)("inlineCode",{parentName:"p"},".unshare")," works for both (but calls ",(0,l.kt)("inlineCode",{parentName:"p"},".unshareFolder")," internally)."),(0,l.kt)("h4",{id:"deletepermanent"},(0,l.kt)("inlineCode",{parentName:"h4"},".delete(permanent)")),(0,l.kt)("p",null,"Delete file, permanently if ",(0,l.kt)("inlineCode",{parentName:"p"},"permanent")," is true, otherwise file is moved to rubbish bin."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// Moves the file to rubbish bin\nawait file.delete()\n\n// Deletes the file permanently\nawait file.delete(true)\n")),(0,l.kt)("h4",{id:"movetotarget"},(0,l.kt)("inlineCode",{parentName:"h4"},".moveTo(target)")),(0,l.kt)("p",null,"Move a file to target, which can be a folder object or it's nodeId."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// Moves the file to storage root\nawait file.moveTo(storage.root)\n")),(0,l.kt)("h4",{id:"setattributesattributes"},(0,l.kt)("inlineCode",{parentName:"h4"},".setAttributes(attributes)")),(0,l.kt)("p",null,"Set the the attributes of a object. Doesn't remove the current ones, but can overwrite those."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"await file.setAttributes({someAttribute: someValue})\n")),(0,l.kt)("h4",{id:"uploadattributetype-bufferstream"},(0,l.kt)("inlineCode",{parentName:"h4"},".uploadAttribute(type, [buffer|stream])")),(0,l.kt)("p",null,"Upload a thumbnail or preview image to the existent file. Fails if the node is a folder."),(0,l.kt)("p",null,"The argument ",(0,l.kt)("inlineCode",{parentName:"p"},"type")," can be a string (",(0,l.kt)("inlineCode",{parentName:"p"},"thumbnail")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"preview"),") or a integer (",(0,l.kt)("inlineCode",{parentName:"p"},"0")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"1"),")."),(0,l.kt)("h4",{id:"renamenewfilename"},(0,l.kt)("inlineCode",{parentName:"h4"},".rename(newFileName)")),(0,l.kt)("p",null,"Rename a file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"await file.rename('hello-world.txt')\n")),(0,l.kt)("h4",{id:"setlabellabel"},(0,l.kt)("inlineCode",{parentName:"h4"},".setLabel(label)")),(0,l.kt)("p",null,"Set file's label, where ",(0,l.kt)("inlineCode",{parentName:"p"},"label")," can be a number between 0 and 7 or a valid label color the following: 'red', 'orange', 'yellow', 'green', 'blue', 'purple' and 'grey'."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"await file.setLabel('red')\n")),(0,l.kt)("h4",{id:"setfavoriteisfavorite"},(0,l.kt)("inlineCode",{parentName:"h4"},".setFavorite(isFavorite)")),(0,l.kt)("p",null,"Set file as favorite is ",(0,l.kt)("inlineCode",{parentName:"p"},"isFavorite")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"true")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"await file.setFavorite(true)\nawait file.setFavorite(false)\n")),(0,l.kt)("h3",{id:"events-1"},"Events"),(0,l.kt)("p",null,"Same events as for Storage objects. Only trigger for a specific file."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"move")," - File was moved to another dir. Parameters: olddir."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"delete")," - File was deleted."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"update")," - File metadata was changed.")),(0,l.kt)("h2",{id:"api"},"API"),(0,l.kt)("p",null,"The API class handles API connections, which includes part of the logged state, user-agent, HTTP/HTTPS agents (for proxying)."),(0,l.kt)("h3",{id:"properties-2"},"Properties"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"gateway")," - the gateway used to connect to MEGA's API, defaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"https://g.api.mega.co.nz/"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"userAgent")," - the user-agent used when connecting, defaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"megajs/{version}"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"httpAgent")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"httpsAgent")," - the HTTP(S) agents used in Node, can be overriden to enable proxying;"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fetch")," - the fetch function used by library, defaults to ",(0,l.kt)("inlineCode",{parentName:"li"},"node-fetch")," in Node and ",(0,l.kt)("inlineCode",{parentName:"li"},"globalThis.fetch")," in other environments;")),(0,l.kt)("p",null,"If the ",(0,l.kt)("inlineCode",{parentName:"p"},"fetch")," function is overridden then the ",(0,l.kt)("inlineCode",{parentName:"p"},"userAgent"),", httpAgent",(0,l.kt)("inlineCode",{parentName:"p"},"and"),"httpsAgent` properties will be ignored."),(0,l.kt)("h3",{id:"static-functions"},"Static functions"),(0,l.kt)("h4",{id:"apigetglobalapi"},(0,l.kt)("inlineCode",{parentName:"h4"},"API.getGlobalApi()")),(0,l.kt)("p",null,"Returns the global API shared by ",(0,l.kt)("inlineCode",{parentName:"p"},"File")," instances."),(0,l.kt)(r.Z,{language:"js",code:"import { API } from 'megajs'\nconst api = API.getGlobalApi()",version:"1",mdxType:"CodeBlockSwitchable"}),(0,l.kt)("p",null,"Storage objects have their own API objects which can be accessed via ",(0,l.kt)("inlineCode",{parentName:"p"},"storage.api"),". The API objects of File objects can be accessed via ",(0,l.kt)("inlineCode",{parentName:"p"},"file.api")," and default to the global instance, but can be overridden to an API instance from a Storage to allow using account downloading limits."),(0,l.kt)("h2",{id:"low-level-functions"},"Low level functions"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"verify")," function accept a file key as argument creates a PassThrough stream that verifies the content received against the key."),(0,l.kt)(r.Z,{language:"js",code:"import { verify } from 'megajs'\n\nconst fileKey = 'example-file-key'\nconst verifyFunction = verify(fileKey)\nconst fileStream = getFileStreamSomehow()\nfileStream.pipe(verifyFunction)\n\nverifyFunction.on('end', () => console.log('File is valid'))\nverifyFunction.on('error', () => console.log('File is corrupted'))",version:"1",mdxType:"CodeBlockSwitchable"}),(0,l.kt)("p",null,"The file key follows the same rules as the ",(0,l.kt)("inlineCode",{parentName:"p"},"key")," argument in the ",(0,l.kt)("inlineCode",{parentName:"p"},"File")," constructor, so it can be a string (",(0,l.kt)("inlineCode",{parentName:"p"},"https://mega.nz/file/...#THIS_PART_OF_THE_SHARE_LINK"),"), a Buffer or a Uint8Array."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"encrypt")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"decrypt")," are lower level transform streams. They accept a key as input and transform file data and outputs encrypted data and vice versa. They also handle MAC verification / generation."),(0,l.kt)("p",null,"The key for ",(0,l.kt)("inlineCode",{parentName:"p"},"encrypt")," must be 192 bit. When the stream ends it a full 256 bit key will be available via the ",(0,l.kt)("inlineCode",{parentName:"p"},".key")," property. The additional 64 bit come from the MAC."),(0,l.kt)("p",null,"The key for the ",(0,l.kt)("inlineCode",{parentName:"p"},"decrypt")," function must be the same 256 bit key returned during encryption."),(0,l.kt)("p",null,"Those two functions are almost never used as ",(0,l.kt)("inlineCode",{parentName:"p"},"download")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"upload")," already handle encryption. They are only exported in order to allow backyards compatibility."))}c.isMDXComponent=!0}}]);