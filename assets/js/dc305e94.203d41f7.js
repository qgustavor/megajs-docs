"use strict";(self.webpackChunkmegajs_docs=self.webpackChunkmegajs_docs||[]).push([[3432],{3819:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=o(4848),t=o(8453),r=o(1432);const d="import { getLoggedInStorage } from './logging-in-demo.js'\nimport { basename, join } from 'https://deno.land/std@0.224.0/path/mod.ts'\nconst storage = await getLoggedInStorage()\n\nconst directoryName = basename(Deno.cwd())\nconst baseFolder = storage.find(directoryName) ?? await storage.mkdir(directoryName)\n\nawait uploadDirectory(baseFolder, Deno.cwd())\n\nasync function uploadDirectory (megaFolder, folderPath) {\n  for await (const entry of Deno.readDir(folderPath)) {\n    if (entry.isDirectory) {\n      const childFolder = await megaFolder.mkdir(entry.name)\n      await uploadDirectory(childFolder, join(folderPath, entry.name))\n    } else {\n      await uploadFile(megaFolder, folderPath, entry.name)\n    }\n  }\n}\n\nasync function uploadFile (megaFolder, folderPath, name) {\n  // You need to set forceHttps to false in order to make\n  // Deno connect to the unsafe MEGA upload servers\n  // (which use out-of-date TLS configurations)\n  // That's not needed in Node.js nor in browsers\n  const uploadStream = megaFolder.upload({ name, forceHttps: false })\n\n  // Get the file and its reader\n  const denoFile = await Deno.open(join(folderPath, name))\n  const inputReader = denoFile.readable.getReader()\n\n  // Read the file and pass the data to the upload stream\n  // (it's a Node.js Writable stream)\n  while (true) {\n    const result = await inputReader.read()\n\n    if (result.value) {\n      const canContinueWritting = uploadStream.write(result.value)\n      if (!canContinueWritting) {\n        // Upload stream is under pressure, wait it to drain\n        await new Promise(resolve => uploadStream.once('drain', resolve))\n      }\n    }\n    \n    if (result.done) {\n      // End the stream when there is no more data to be read\n      uploadStream.end()\n\n      // And break out the while loop\n      break\n    }\n  }\n\n  // Wait for the upload to complete and get the new file object\n  await uploadStream.complete\n}\n",i={sidebar_position:2.0115},s="Recursive streamed folder uploading",l={id:"examples/advanced-folder-uploading",title:"Recursive streamed folder uploading",description:"This demo combines streamed uploading and the use of recursive functions in order to handle folders. Running it will create a folder in the logged MEGA storage with the same name as the current working directory and will upload all files on it into this folder. It will prompt a lot for read permissions!",source:"@site/docs/examples/advanced-folder-uploading.md",sourceDirName:"examples",slug:"/examples/advanced-folder-uploading",permalink:"/docs/1.0/examples/advanced-folder-uploading",draft:!1,unlisted:!1,editUrl:"https://github.com/qgustavor/megajs-docs/tree/main/docs/examples/advanced-folder-uploading.md",tags:[],version:"current",sidebarPosition:2.0115,frontMatter:{sidebar_position:2.0115},sidebar:"tutorialSidebar",previous:{title:"Recursive folder uploading",permalink:"/docs/1.0/examples/recursive-folder-uploading"},next:{title:"File uploading while streaming",permalink:"/docs/1.0/examples/file-uploading-stream"}},c={},u=[];function m(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"recursive-streamed-folder-uploading",children:"Recursive streamed folder uploading"}),"\n",(0,a.jsx)(n.p,{children:"This demo combines streamed uploading and the use of recursive functions in order to handle folders. Running it will create a folder in the logged MEGA storage with the same name as the current working directory and will upload all files on it into this folder. It will prompt a lot for read permissions!"}),"\n",(0,a.jsx)(n.p,{children:"You can try by running this code at your console:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"deno run https://mega.js.org/demos/advanced-uploading-demo.js\n"})}),"\n","\n",(0,a.jsx)(r.A,{language:"js",children:d})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}}}]);