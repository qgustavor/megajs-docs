"use strict";(self.webpackChunkmegajs_docs=self.webpackChunkmegajs_docs||[]).push([[4257],{1716:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>d,toc:()=>p});var a=t(4848),o=t(8453),s=t(1432);const i="import { getLoggedInStorage } from './logging-in-demo.js'\nconst storage = await getLoggedInStorage()\n\n// Open the file to be read\nconst name = prompt('Enter a file name:')\nconst denoFile = await Deno.open(name)\n\n// You need to set forceHttps to false in order to make\n// Deno connect to the unsafe MEGA upload servers\n// (which use out-of-date TLS configurations)\n// That's not needed in Node.js nor in browsers\nconst uploadStream = storage.upload({ name, forceHttps: false })\n\n// Get the file reader\nconst inputReader = denoFile.readable.getReader()\n\n// Read the file and pass the data to the upload stream\n// (it's a Node.js Writable stream)\nwhile (true) {\n  const result = await inputReader.read()\n\n  if (result.value) {\n    const canContinueWritting = uploadStream.write(result.value)\n    if (!canContinueWritting) {\n      // Upload stream is under pressure, wait it to drain\n      await new Promise(resolve => uploadStream.once('drain', resolve))\n    }\n  }\n  \n  if (result.done) {\n    // End the stream when there is no more data to be read\n    uploadStream.end()\n\n    // And break out the while loop\n    break\n  }\n}\n\n// Wait for the upload to complete and get the new file object\nconst file = await uploadStream.complete\nconsole.log('The file was uploaded!', file)\n",r={sidebar_position:2.012},l="File uploading while streaming",d={id:"examples/file-uploading-stream",title:"File uploading while streaming",description:"You can try by running this code at your console:",source:"@site/docs/examples/file-uploading-stream.md",sourceDirName:"examples",slug:"/examples/file-uploading-stream",permalink:"/docs/1.0/examples/file-uploading-stream",draft:!1,unlisted:!1,editUrl:"https://github.com/qgustavor/megajs-docs/tree/main/docs/examples/file-uploading-stream.md",tags:[],version:"current",sidebarPosition:2.012,frontMatter:{sidebar_position:2.012},sidebar:"tutorialSidebar",previous:{title:"Recursive folder uploading",permalink:"/docs/1.0/examples/recursive-folder-uploading"},next:{title:"File downloading while streaming",permalink:"/docs/1.0/examples/file-streaming"}},u={},p=[];function c(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"file-uploading-while-streaming",children:"File uploading while streaming"}),"\n",(0,a.jsx)(n.p,{children:"You can try by running this code at your console:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"deno run https://mega.js.org/demos/uploading-stream-demo.js\n"})}),"\n","\n",(0,a.jsx)(s.A,{language:"js",children:i})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);