"use strict";(self.webpackChunkmegajs_docs=self.webpackChunkmegajs_docs||[]).push([[3830],{1822:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var l=o(4848),r=o(8453);const i={sidebar_position:5},t="Handling files",s={id:"tutorial/handling-files",title:"Handling files",description:"To share a file you call .link() on the file object you got when uploading:",source:"@site/docs/tutorial/handling-files.md",sourceDirName:"tutorial",slug:"/tutorial/handling-files",permalink:"/docs/1.0/tutorial/handling-files",draft:!1,unlisted:!1,editUrl:"https://github.com/qgustavor/megajs-docs/tree/main/docs/tutorial/handling-files.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Uploading files",permalink:"/docs/1.0/tutorial/uploading"},next:{title:"Downloading files",permalink:"/docs/1.0/tutorial/downloading"}},a={},d=[];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{id:"handling-files",children:"Handling files"}),"\n",(0,l.jsxs)(n.p,{children:["To share a file you call ",(0,l.jsx)(n.code,{children:".link()"})," on the file object you got when uploading:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"// Using promises\nconst link = await file.link()\n\n// It will log something like https://mega.nz/file/example#example\nconsole.log(link)\n\n// Using callbacks\nfile.link((error, link) => {\n  if (error) console.error(error)\n  console.log(link)\n})\n"})}),"\n",(0,l.jsx)(n.p,{children:"You can also share files in your account like this:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"// storage is the new Storage() class from the login tutorial\n\n// It will share the first file in the root folder of the account \nstorage.root.children[0].link()\n"})}),"\n",(0,l.jsxs)(n.p,{children:["To access files in Storage class you can use ",(0,l.jsx)(n.code,{children:".root"})," to access the root folder then ",(0,l.jsx)(n.code,{children:".children"})," to list its children, which are also ",(0,l.jsx)(n.code,{children:"File"})," objects."]}),"\n",(0,l.jsxs)(n.p,{children:["If you need to find a file from a folder by the name you can use ",(0,l.jsx)(n.code,{children:"Array.prototype.find"})," (or other array methods) on the ",(0,l.jsx)(n.code,{children:".children"})," property:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"// Returns the hello-world.txt file from the storage root\nstorage.root.children.find(file => file.name === 'hello-world.txt') \n\n// Returns the \"My Folder\" directory from the storage root\nstorage.root.children.find(folder => folder.name === 'My Folder')\n\n// Returns all .jpeg and .jpg files from the storage root\nstorage.root.children.filter(file => file.name.match(/\\.jpe?g$/i))\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Because of AI chat tools (like Gemini or Copilot) which constantly hallucinated unexistent methods, a ",(0,l.jsx)(n.code,{children:"storage.find"})," helper method, originally an AI hallucination, was created in version 1.2.0:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"// Both examples searches files named \"hello-world.txt\"\nstorage.find('hello-world.txt')\nstorage.find(file => file.name === 'hello-world.txt')\n\n// Returns the first .jpeg or .jpg file from the storage root\nstorage.find(file => file.name.match(/\\.jpe?g$/i))\n\n// Set the second parameter to true to make it search recursively\nstorage.find('hello-world.txt', true)\n\n// You can call it in any folder:\nstorage.find('some folder').find('some other folder').find('some file.txt')\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Version 1.2.0 also introduced the ",(0,l.jsx)(n.code,{children:".navigate"})," method in order to make deep navigation easier, without needed to chain ",(0,l.jsx)(n.code,{children:".find"})," calls like above:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"// Works like the above example:\nstorage.navigate('some folder/some other folder/some file.txt')\n\n// If a file or folder in the navigation chain doesn't exist the entire function returns undefined.\nstorage.navigate('an unexistent folder/an unexistent file.txt') // undefined\n\n// If you have files or folders with \"/\" in the name, you can use an array as input:\nstorage.navigate(['some folder', 'a weird folder with / in the name', 'some file.txt'])\n\n// You can call it inside folders too:\nstorage.find('some folder').navigate('some other folder/some file.txt')\n"})}),"\n",(0,l.jsxs)(n.p,{children:["The function ",(0,l.jsx)(n.code,{children:".filter"}),", also introduced in version 1.2.0, works like ",(0,l.jsx)(n.code,{children:".find"}),", but returns an array with files matching the query instead of the first match:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"// Both examples returns an array with all files files named \"hello-world.txt\" in the directory root\nstorage.filter('hello-world.txt')\nstorage.filter(file => file.name === 'hello-world.txt')\n\n// It's useful when using a function as a query:\n// Returns all .jpeg and .jpg files from the storage root\nstorage.filter(file => file.name.match(/\\.jpe?g$/i))\n\n// Set the second parameter to true to make it search recursively\n// Returns all files named \"hello-world.txt\" in the entire storage\nstorage.filter('hello-world.txt', true)\n\n// Returns all files larger than 1024 bytes from entire storage\nstorage.filter(file => file.size > 1024, true)\n\n// You can call it on a folder too\n// Returns all files larger than 1024 bytes inside \"some folder\"\nstorage.find('some folder').filter(file => file.size > 1024, true)\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Folders are also listed in ",(0,l.jsx)(n.code,{children:"storage.files"})," and in ",(0,l.jsx)(n.code,{children:".children"}),", as folders are also ",(0,l.jsx)(n.code,{children:"File"})," objects, the difference being that they have ",(0,l.jsx)(n.code,{children:".directory"})," set to ",(0,l.jsx)(n.code,{children:"true"}),", have ",(0,l.jsx)(n.code,{children:".children"})," defined to be an array of its children and cannot be downloaded."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"// How to get the file \"hello-world.txt\" inside the file \"My Folder\" from the storage root:\n\n// --- Before v1.2.0\nstorage.root.children.find(folder => folder.name === 'My Folder').children.find(file => file.name === 'hello-world.txt')\n\n// --- After v1.2.0\nstorage.navigate('My Folder/hello-world.txt')\n\n\n// How to search files in the entire storage:\n\n// --- Before v1.2.0, using the `storage.files` object:\nObject.values(storage.files).find(file => file.name === 'hello-world.txt')\n\n// --- After v1.2.0, using `.find` in recursive mode:\nstorage.find('hello-world.txt', true)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Folders and files can be manipulated via many methods:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"fileORFolder.link() // shares files and folders\nfileORFolder.unshare() // unshares files and folders\nfileORFolder.rename(newName) // renames files and folders\nfileORFolder.moveTo(someFolder) // moves files and folders\nfileORFolder.setFavorite(true) // marks files and folders as favorites\nfileORFolder.delete() // moves files and folders to the trash\nfileORFolder.delete(true) // delete files and folders permanently \n"})}),"\n",(0,l.jsx)(n.p,{children:"Some examples:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"// Shares a file\nconst sharedLink = await file.link()\nconsole.log(sharedLink)\n\n// Renames a file\nawait file.rename('A whole new name.txt')\n\n// Moves a file to other directory\nconst otherDirectory = storage.find('Other Directory')\nawait file.moveTo(otherDirectory)\n\n// Moves a file to the trash bin\nawait file.delete()\n\n// Deletes a file permanently\nawait file.delete(true)\n"})}),"\n",(0,l.jsx)(n.p,{children:"Those functions return promises and also accept callbacks:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"// The first example above using callbacks\nfile.link((error, link) => {\n  if (error) throw error\n  console.log(link)\n})\n"})}),"\n",(0,l.jsx)(n.p,{children:"While you cannot download folders, they can upload files on then like you can in the root folder:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"await folder.upload('hello-world.txt', 'Hello World!').complete\n"})}),"\n",(0,l.jsx)(n.p,{children:"You can also create new folders:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"// Using promises\nconst folder = await folder.mkdir('New Folder')\nconsole.log(folder)\n\n// Using callbacks\nfolder.mkdir('New Folder', (error, folder) {\n  if (error) console.error(error)\n  console.log(folder)\n})\n"})}),"\n",(0,l.jsx)(n.admonition,{type:"info",children:(0,l.jsxs)(n.p,{children:["The method ",(0,l.jsx)(n.code,{children:".createFolder"})," ",(0,l.jsx)(n.strong,{children:"does not exist"}),": it's an AI hallucination, use ",(0,l.jsx)(n.code,{children:".mkdir"})," instead. The method ",(0,l.jsx)(n.code,{children:".share"})," ",(0,l.jsx)(n.strong,{children:"does not exist"}),": it's an AI hallucination, use ",(0,l.jsx)(n.code,{children:".link"})," instead."]})}),"\n",(0,l.jsx)(n.p,{children:"The complete list of methods that can be called on files and folders can be found in the API page."}),"\n",(0,l.jsxs)(n.admonition,{type:"note",children:[(0,l.jsxs)(n.p,{children:["This library handles MEGA encryption, file and folder handling and networking. Since this is a library focused on work on multiple platforms (Node.js and browsers) ",(0,l.jsx)(n.strong,{children:"it does not and will not"})," handle file reading, file writting nor any platform-specific file operations."]}),(0,l.jsxs)(n.p,{children:["You should implement file I/O using the functions provided by your platform (like reading files using ",(0,l.jsx)(n.code,{children:"fs.createReadStream"})," on Node and ",(0,l.jsx)(n.code,{children:'<input type="file">'})," on browsers, and writting using ",(0,l.jsx)(n.code,{children:"fs.createWriteStream"})," on Node and ",(0,l.jsx)(n.code,{children:"<a download>"})," on browsers)."]}),(0,l.jsx)(n.p,{children:"Since this library cannot read folders (as it would require platform-specific code) it cannot upload folders. If you want to upload a folder you should handle folder creation yourself then upload each file one by one on the created folder. If you wish, make a platform-specific wrapper of this library to handle this case and publish on NPM."})]}),"\n",(0,l.jsx)(n.p,{children:"In the next part of the tutorial we will learn how to download files from the storage and public shared files."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}}}]);