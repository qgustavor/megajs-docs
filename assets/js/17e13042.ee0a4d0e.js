"use strict";(self.webpackChunkmegajs_docs=self.webpackChunkmegajs_docs||[]).push([[542],{1163:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var a=n(7462),o=(n(7294),n(3905));const i={sidebar_position:7},l="Advanced usage",r={unversionedId:"tutorial/advanced",id:"version-0.17/tutorial/advanced",title:"Advanced usage",description:"Downloading shared files using account limits",source:"@site/versioned_docs/version-0.17/tutorial/advanced.md",sourceDirName:"tutorial",slug:"/tutorial/advanced",permalink:"/docs/0.17/tutorial/advanced",draft:!1,editUrl:"https://github.com/qgustavor/megajs-docs/tree/main/versioned_docs/version-0.17/tutorial/advanced.md",tags:[],version:"0.17",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Downloading files",permalink:"/docs/0.17/tutorial/downloading"},next:{title:"Security",permalink:"/docs/0.17/tutorial/security"}},s={},d=[{value:"Downloading shared files using account limits",id:"downloading-shared-files-using-account-limits",level:2},{value:"Setting request configuration",id:"setting-request-configuration",level:2},{value:"Resuming a download",id:"resuming-a-download",level:2},{value:"Downloading then decrypting",id:"downloading-then-decrypting",level:2},{value:"Encrypting then uploading",id:"encrypting-then-uploading",level:2},{value:"Uploading without encryption",id:"uploading-without-encryption",level:2}],u={toc:d},p="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"advanced-usage"},"Advanced usage"),(0,o.kt)("h2",{id:"downloading-shared-files-using-account-limits"},"Downloading shared files using account limits"),(0,o.kt)("p",null,"Files created with ",(0,o.kt)("inlineCode",{parentName:"p"},"new File")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"File.fromURL")," by default use a non-logged API instance and can be quite limited. To work around those limits accounts can be used, so downloading will use the limits from those:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// First log in\nconst storage = new Storage(options, callback)\n\n// Wait for the callback then get a shared file\nconst sharedFile = File.fromURL(url)\n\n// Finally replace the non-logged API instance with the logged instance\nsharedFile.api = storage.api\n\n// Now downloading the shared file will use the limits from that account\n")),(0,o.kt)("h2",{id:"setting-request-configuration"},"Setting request configuration"),(0,o.kt)("p",null,"In version 0.xx ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/request"},"request")," is used to handle HTTP(s) connections with MEGA servers. It can be configured like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Get a File or Storage object\nlet file = File.fromURL(url)\nlet storage = new Storage(options, callback)\n\n// The request module can be acessed using:\nfile.api.requestModule\nstorage.api.requestModule\n\n// It can be overwritten, so if you need to set up a proxy\nfile.api.requestModule = file.api.requestModule.defaults({\n  proxy: 'your proxy url'\n})\n\n// Storage logins up automatically, so if you may want to disable autologin\nstorage = new Storage({ ..., autologin: false })\n// configure request like shown above then login\nstorage.login(callback)\n")),(0,o.kt)("p",null,"If possible use this to set up a user-agent."),(0,o.kt)("h2",{id:"resuming-a-download"},"Resuming a download"),(0,o.kt)("p",null,"When a download fails it will stop the stream you need to create other stream in order to resume it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let file = File.fromURL(url)\nlet filename = 'filename.ext'\n\nlet start = fs.statSync(filename).size\n\nfile.download({ start })\n  .pipe(fs.createWriteStream(filename, {\n    flags: 'r+', // <= set flags to prevent overwriting the file\n    start\n  }))\n")),(0,o.kt)("h2",{id:"downloading-then-decrypting"},"Downloading then decrypting"),(0,o.kt)("p",null,"If you want to download then decrypt, not the two at the same time, then do the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let file = File.fromURL(url)\n\n// Download it using cipher\nfile.download({ cipher: true })\n  .pipe(fs.createWriteStream('filename.ext.enc'))\n\n// Later decrypt it using decrypt\nfs.readFileStream('filename.ext.enc')\n  .pipe(decrypt('base64 file key'))\n  .pipe(fs.createWriteStream('filename.ext'))\n")),(0,o.kt)("p",null,"I find hard someone having to do that, but maybe it's useful for someone as seems ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tonistiigi/mega"},"tonistiigi")," supported it (by exporting the ",(0,o.kt)("inlineCode",{parentName:"p"},"decrypt")," function)."),(0,o.kt)("h2",{id:"encrypting-then-uploading"},"Encrypting then uploading"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let encryptStream = encrypt()\nfs.readFileStream('filename.ext')\n  .pipe(encryptStream)\n  .pipe(fs.createWriteStream('filename.ext.enc'))\n\n// Get the generated key\nencryptStream.on('end', () => {\n  console.log(encryptStream.key.toString('hex'))\n})\n\n// Later upload the encrypted file\nlet storage = new Storage(options, callback)\n\n// Wait for callback, then:\nstorage.upload({\n  uploadCiphertext: true,\n  key: Buffer.from('key from console.log', 'hex')\n})\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/tonistiigi/mega"},"tonistiigi's mega")," also exported an ",(0,o.kt)("inlineCode",{parentName:"p"},"encrypt")," function, so that's how you can use it. Do ",(0,o.kt)("strong",{parentName:"p"},"not")," forget the ",(0,o.kt)("inlineCode",{parentName:"p"},"size")," option when uploading!"),(0,o.kt)("h2",{id:"uploading-without-encryption"},"Uploading without encryption"),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"This code does not work anymore due to changes in MEGA. For more info ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/qgustavor/mega/discussions/108"},"check this discussion"),".")),(0,o.kt)("p",null,"Make MEGA work like any other file hosting service:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let storage = new Storage(options, callback)\n\n// Wait for callback, then:\nstorage.upload({\n  uploadCiphertext: true,\n  // This key will be used to encrypt the attributes\n  // Avoid reusing keys (like using `Buffer.alloc(32)`)\n  // as seems MEGA does some kind of caching on those\n  key: crypto.randomBytes(32)\n})\n")),(0,o.kt)("p",null,"To download do the ",(0,o.kt)("a",{parentName:"p",href:"#downloading-then-decrypting"},'"Downloading then decrypting"')," steps. Do ",(0,o.kt)("strong",{parentName:"p"},"not")," forget the ",(0,o.kt)("inlineCode",{parentName:"p"},"size")," option when uploading!"))}c.isMDXComponent=!0}}]);