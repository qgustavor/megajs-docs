"use strict";(self.webpackChunkmegajs_docs=self.webpackChunkmegajs_docs||[]).push([[750],{454:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>m,default:()=>b,frontMatter:()=>c,metadata:()=>p,toc:()=>h});var o=n(7462),r=n(7294),a=n(3905),i=n(1374),d=n(2389);function s(e){let{children:t,fallback:n}=e;return(0,d.Z)()?r.createElement(r.Fragment,null,t?.()):n??null}function l(e){return r.createElement(s,{fallback:r.createElement("p",null,"Loading...")},(()=>r.createElement(u,e)))}function u(e){if(window.__CPEmbed)setTimeout((()=>window.__CPEmbed()),100);else{const e=document.createElement("script");e.src="https://cpwebassets.codepen.io/assets/embed/ei.js",document.head.appendChild(e)}return r.createElement("p",{className:"codepen","data-height":e.height||300,"data-default-tab":e.defaultTab||"js,result","data-slug-hash":e.hash,"data-user":e.user,style:{height:"300px",boxSizing:"border-box",display:"flex",alignItems:"center",justifyContent:"center",border:"2px solid",margin:"1em 0",padding:"1em"}},r.createElement("span",null,"See ",r.createElement("a",{href:"https://codepen.io/"+e.user+"/pen/"+e.hash},"this pen")," on ",r.createElement("a",{href:"https://codepen.io"},"CodePen"),"."))}const c={sidebar_position:7},m="Interrupted downloads",p={unversionedId:"tutorial/interrupted-downloads",id:"tutorial/interrupted-downloads",title:"Interrupted downloads",description:"If a download gets interrupted - because connection issues or user action - you need to create other stream to resume it:",source:"@site/docs/tutorial/interrupted-downloads.md",sourceDirName:"tutorial",slug:"/tutorial/interrupted-downloads",permalink:"/docs/1.0/tutorial/interrupted-downloads",draft:!1,editUrl:"https://github.com/qgustavor/megajs-docs/tree/main/docs/tutorial/interrupted-downloads.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Downloading files",permalink:"/docs/1.0/tutorial/downloading"},next:{title:"Network settings",permalink:"/docs/1.0/tutorial/network-settings"}},f={},h=[],w={toc:h},g="wrapper";function b(e){let{components:t,...n}=e;return(0,a.kt)(g,(0,o.Z)({},w,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"interrupted-downloads"},"Interrupted downloads"),(0,a.kt)("p",null,"If a download gets interrupted - because connection issues or user action - you need to create other stream to resume it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const file = File.fromURL(url)\nawait file.loadAttributes()\n\nconst start = fs.statSync(file.name).size\nconst downloadStream = file.download({ start })\n\nconst writableStream = fs.createWriteStream(filename, {\n  flags: 'r+', // <= set flags to prevent overwriting the file\n  start\n})\n\ndownloadStream.pipe(writableStream)\n")),(0,a.kt)("p",null,"The above example assume a Node.js environment, in other environments you might need to convert the Node stream returned by ",(0,a.kt)("inlineCode",{parentName:"p"},"download")," to the way file streaming is handled in this environment (like Deno's ",(0,a.kt)("inlineCode",{parentName:"p"},"Deno.open"),")."),(0,a.kt)("p",null,"Interrupted downloads are not checked due to limitations on MEGA's MAC verification which only works on the entire file contents, but you can verify an already downloaded file using the ",(0,a.kt)("inlineCode",{parentName:"p"},"verify")," function:"),(0,a.kt)(i.Z,{language:"js",code:"import { File, verify } from 'megajs'\n// node2deno:if-node\nimport { createReadStream } from 'node:fs'\n// node2deno:if-deno\nimport { iterateReader } from 'https://cdn.deno.land/std/versions/0.125.0/raw/streams/conversion.ts'\n\n// node2deno:if-node\n// Get a file read stream. createReadStream can be used:\n// node2deno:if-deno\n// Get a file read stream. Deno.open and iterateReader can be used:\n// node2deno:if-node\nconst readStream = createReadStream(filename)\n// node2deno:if-deno\nconst readStream = iterateReader(await Deno.open(filename))\n\nconst file = File.fromURL(url)\nconst verifyStream = verify(file.key)\n\nverifyStream.on('error', error => {\n  // File is corrupted\n})\n\nverifyStream.on('end', () => {\n  // File is OK\n})\n\n// node2deno:if-node\nreadStream.pipe(verifyStream)\n// node2deno:if-deno\nfor await (const data of readStream) {\n// node2deno:if-deno\n  verifyStream.write(data)\n// node2deno:if-deno\n}\n// node2deno:if-deno\nverifyStream.end()",version:"1",mdxType:"CodeBlockSwitchable"}),(0,a.kt)("p",null,"Here is a browser implementation:"),(0,a.kt)(l,{user:"qgustavor",hash:"wvPNNeb",height:"500",mdxType:"CodepenEmbed"}),(0,a.kt)("p",null,"The last part of the tutorial is changing network settings."))}b.isMDXComponent=!0}}]);