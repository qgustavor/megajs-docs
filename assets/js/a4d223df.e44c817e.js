"use strict";(self.webpackChunkmegajs_docs=self.webpackChunkmegajs_docs||[]).push([[377],{6585:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>p});var r=o(4848),t=o(8453),a=o(1432);const s="import { Storage } from 'npm:megajs'\n\nconst email = prompt('Enter your email:')\nconst password = prompt('Enter your password (will be visible):')\n\nconst storage = await new Storage({ email, password }).ready\n\nconst folderName = prompt('Enter a folder name:')\nconst folderStat = await Deno.stat(folderName)\nif (!folderStat.isDirectory) throw Error('Not a directory!')\n\nconst handleFolder = async (path, name, rootNode) => {\n  // Create a folder on the remote node\n  const megaFolder = await rootNode.mkdir(name)\n\n  // Then upload files into it\n  for await (const entry of Deno.readDir(path)) {\n    const filePath = path + '/' + entry.name\n    const fileStat = await Deno.stat(filePath)\n\n    if (fileStat.isDirectory) {\n      await handleFolder(filePath, entry.name, megaFolder)\n    } else {\n      const data = await Deno.readFile(filePath)\n      await megaFolder.upload({\n        name: entry.name,\n        forceHttps: false\n      }, data).complete\n    }\n  }\n}\n\nawait handleFolder(folderName, folderName, storage.children)\nconsole.log('The folder was uploaded!', megaFolder)\n",i={},l="Recursive folder uploading",d={id:"examples/recursive-folder-uploading",title:"Recursive folder uploading",description:"Check the simpler non-recursive example before checking this one!",source:"@site/docs/examples/recursive-folder-uploading.md",sourceDirName:"examples",slug:"/examples/recursive-folder-uploading",permalink:"/docs/1.0/examples/recursive-folder-uploading",draft:!1,unlisted:!1,editUrl:"https://github.com/qgustavor/megajs-docs/tree/main/docs/examples/recursive-folder-uploading.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"File iterating",permalink:"/docs/1.0/examples/iterating-files"},next:{title:"Shared file downloading",permalink:"/docs/1.0/examples/shared-file-downloading"}},c={},p=[];function m(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"recursive-folder-uploading",children:"Recursive folder uploading"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Check the simpler non-recursive example before checking this one!"})}),"\n",(0,r.jsx)(n.p,{children:"This example is meant to be run using Deno. You can try by running this code at your console:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"deno run https://mega.js.org/demos/recursive-folder-uploading-demo.js\n"})}),"\n","\n",(0,r.jsx)(a.A,{language:"js",children:s})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>i});var r=o(6540);const t={},a=r.createContext(t);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);