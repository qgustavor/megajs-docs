"use strict";(self.webpackChunkmegajs_docs=self.webpackChunkmegajs_docs||[]).push([[918],{1484:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>t,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});var o=l(4848),s=l(8453);const r={sidebar_position:5},i="Handling files",a={id:"tutorial/handling-files",title:"Handling files",description:"To share a file you call .link() on the file object you got when uploading:",source:"@site/versioned_docs/version-0.17/tutorial/handling-files.md",sourceDirName:"tutorial",slug:"/tutorial/handling-files",permalink:"/docs/0.17/tutorial/handling-files",draft:!1,unlisted:!1,editUrl:"https://github.com/qgustavor/megajs-docs/tree/main/versioned_docs/version-0.17/tutorial/handling-files.md",tags:[],version:"0.17",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Uploading files",permalink:"/docs/0.17/tutorial/uploading"},next:{title:"Downloading files",permalink:"/docs/0.17/tutorial/downloading"}},t={},d=[];function c(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"handling-files",children:"Handling files"}),"\n",(0,o.jsxs)(n.p,{children:["To share a file you call ",(0,o.jsx)(n.code,{children:".link()"})," on the file object you got when uploading:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"file.link((error, link) => {\n  if (error) console.error(error)\n\n  // It will log something like https://mega.nz/file/example#example\n  console.log(link)\n})\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can also share files in your account like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"// storage is the new Storage() class from the login tutorial\n\n// It will share the first file in the root folder of the account \nstorage.root.children[0].link(callback)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To access files in Storage class you can use ",(0,o.jsx)(n.code,{children:".root"})," to access the root folder then ",(0,o.jsx)(n.code,{children:".children"})," to list its children, which are also ",(0,o.jsx)(n.code,{children:"File"})," objects."]}),"\n",(0,o.jsxs)(n.p,{children:["If you need to find a file from a folder by the name you can use ",(0,o.jsx)(n.code,{children:"Array.prototype.find"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const file = storage.root.children.find(file => file.name === 'hello-world.txt')\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can also search files in the entire storage by using the ",(0,o.jsx)(n.code,{children:"storage.files"})," object. This object is a map of ",(0,o.jsx)(n.code,{children:"file id => File object"}),", so in order to search the entire account you can use ",(0,o.jsx)(n.code,{children:"Object.values"})," like so:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const file = Object.values(storage.files).find(file => file.name === 'hello-world.txt')\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Folders are also listed in ",(0,o.jsx)(n.code,{children:"storage.files"})," and in ",(0,o.jsx)(n.code,{children:".children"}),", as folders are also ",(0,o.jsx)(n.code,{children:"File"})," objects, the difference being that they have ",(0,o.jsx)(n.code,{children:".directory "})," set to ",(0,o.jsx)(n.code,{children:"true"}),", have ",(0,o.jsx)(n.code,{children:".children"})," defined to be an array of its children and cannot be downloaded."]}),"\n",(0,o.jsx)(n.p,{children:"Those differences aside they can be manipulated like other files:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"fileORFolder.link(callback) // shares files and folders\nfileORFolder.rename(newName, callback) // renames files and folders\nfileORFolder.moveTo(someFolder, callback) // moves files and folders\nfileORFolder.setFavorite(true, callback) // marks files and folders as favorites\nfileORFolder.delete(callback) // moves files and folders to the trash\nfileORFolder.delete(true, callback) // delete files and folders permanently \n"})}),"\n",(0,o.jsx)(n.p,{children:"While you cannot download folders, they can upload files on then like you can in the root folder:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"folder.upload('hello-world.txt', 'Hello World!', callback)\n"})}),"\n",(0,o.jsx)(n.p,{children:"You can also create new folders:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"folder.mkdir('New Folder', (error, folder) {\n  if (error) console.error(error)\n  console.log(folder)\n})\n"})}),"\n",(0,o.jsx)(n.p,{children:"The complete list of methods that can be called on files and folders can be found in the API page."}),"\n",(0,o.jsx)(n.p,{children:"In the next part of the tutorial we will learn how to download files from the storage and public shared files."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>i,x:()=>a});var o=l(6540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);